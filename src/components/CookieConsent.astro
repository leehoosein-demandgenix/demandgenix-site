---
---

<div id="cookie-banner" class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 shadow-lg z-50 transform translate-y-full transition-transform duration-300">
  <div class="max-w-6xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4">
    <div class="flex-1">
      <p class="text-sm">
        We use cookies to enhance your experience and analyze our site traffic. 
        By clicking "Accept All", you consent to our use of cookies. 
        <a href="/privacy-policy" class="underline hover:text-gray-300">Learn more</a>
      </p>
    </div>
    <div class="flex gap-3 flex-shrink-0">
      <button id="cookie-decline" class="px-4 py-2 text-sm border border-gray-600 rounded hover:bg-gray-800 transition-colors">
        Decline
      </button>
      <button id="cookie-settings" class="px-4 py-2 text-sm border border-gray-600 rounded hover:bg-gray-800 transition-colors">
        Settings
      </button>
      <button id="cookie-accept" class="px-4 py-2 text-sm bg-primary-600 rounded hover:bg-primary-700 transition-colors">
        Accept All
      </button>
    </div>
  </div>
</div>

<!-- Cookie Settings Modal -->
<div id="cookie-modal" class="fixed inset-0 bg-black bg-opacity-50 z-60 hidden items-center justify-center p-4">
  <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
    <div class="p-6">
      <h2 class="text-2xl font-bold mb-4">Cookie Settings</h2>
      <p class="text-gray-600 mb-6">
        Choose which cookies you'd like to accept. You can change these settings at any time.
      </p>
      
      <div class="space-y-6">
        <!-- Essential Cookies -->
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <h3 class="font-semibold">Essential Cookies</h3>
            <p class="text-sm text-gray-600 mt-1">
              Required for the website to function properly. Cannot be disabled.
            </p>
          </div>
          <input type="checkbox" checked disabled class="mt-1">
        </div>
        
        <!-- Analytics Cookies -->
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <h3 class="font-semibold">Analytics Cookies</h3>
            <p class="text-sm text-gray-600 mt-1">
              Help us understand how visitors interact with our website (Google Analytics).
            </p>
          </div>
          <input type="checkbox" id="analytics-cookies" class="mt-1">
        </div>
        
        <!-- Marketing Cookies -->
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <h3 class="font-semibold">Marketing Cookies</h3>
            <p class="text-sm text-gray-600 mt-1">
              Used for lead tracking and marketing automation (HubSpot, LinkedIn).
            </p>
          </div>
          <input type="checkbox" id="marketing-cookies" class="mt-1">
        </div>
      </div>
      
      <div class="flex gap-3 mt-8">
        <button id="save-settings" class="flex-1 bg-primary-600 text-white py-2 px-4 rounded hover:bg-primary-700 transition-colors">
          Save Settings
        </button>
        <button id="close-modal" class="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50 transition-colors">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  console.log('üç™ CookieConsent: Script loaded');
  
  // Cookie management for Zaraz
  const COOKIE_NAME = 'cookie-consent';
  const ANALYTICS_COOKIE = 'analytics-consent';
  const MARKETING_COOKIE = 'marketing-consent';

  // Cookie utilities
  function setCookie(name, value, days = 365) {
    const expires = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toUTCString();
    document.cookie = `${name}=${value}; expires=${expires}; path=/; SameSite=Lax`;
    console.log(`üç™ Set cookie: ${name}=${value}`);
  }

  function getCookie(name) {
    const value = document.cookie.split('; ').find(row => row.startsWith(name + '='))?.split('=')[1];
    console.log(`üç™ Get cookie: ${name}=${value || 'not found'}`);
    return value;
  }

  function showBanner() {
    console.log('üç™ Showing banner');
    const banner = document.getElementById('cookie-banner');
    if (banner) {
      banner.classList.remove('translate-y-full');
    } else {
      console.error('üç™ Banner element not found!');
    }
  }

  function hideBanner() {
    console.log('üç™ Hiding banner');
    const banner = document.getElementById('cookie-banner');
    if (banner) {
      banner.classList.add('translate-y-full');
    }
  }

  function showModal() {
    console.log('üç™ Showing modal');
    const modal = document.getElementById('cookie-modal');
    const analyticsCheckbox = document.getElementById('analytics-cookies');
    const marketingCheckbox = document.getElementById('marketing-cookies');
    
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      // Load current settings
      if (analyticsCheckbox) analyticsCheckbox.checked = getCookie(ANALYTICS_COOKIE) === 'true';
      if (marketingCheckbox) marketingCheckbox.checked = getCookie(MARKETING_COOKIE) === 'true';
    }
  }

  function hideModal() {
    console.log('üç™ Hiding modal');
    const modal = document.getElementById('cookie-modal');
    if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    }
  }

  // Update Zaraz consent
  function updateZarazConsent(analytics, marketing) {
    console.log(`üç™ Updating Zaraz consent: analytics=${analytics}, marketing=${marketing}`);
    
    if (typeof window.zaraz !== 'undefined' && window.zaraz.consent) {
      try {
        // Set Google Consent Mode v2
        window.zaraz.consent.set({
          analytics_storage: analytics ? 'granted' : 'denied',
          ad_storage: marketing ? 'granted' : 'denied',
          ad_user_data: marketing ? 'granted' : 'denied',
          ad_personalization: marketing ? 'granted' : 'denied'
        });
        console.log('üç™ Zaraz consent updated successfully');
      } catch (e) {
        console.error('üç™ Error updating Zaraz consent:', e);
      }
    } else {
      console.warn('üç™ Zaraz not loaded yet, consent will be applied when Zaraz initializes');
    }
  }

  // Initialize immediately - don't wait for DOMContentLoaded
  (function initializeCookieConsent() {
    console.log('üç™ Initializing cookie consent');
    console.log('üç™ Document ready state:', document.readyState);
    
    // Get elements
    const banner = document.getElementById('cookie-banner');
    const modal = document.getElementById('cookie-modal');
    const acceptBtn = document.getElementById('cookie-accept');
    const declineBtn = document.getElementById('cookie-decline');
    const settingsBtn = document.getElementById('cookie-settings');
    const saveSettingsBtn = document.getElementById('save-settings');
    const closeModalBtn = document.getElementById('close-modal');
    const analyticsCheckbox = document.getElementById('analytics-cookies');
    const marketingCheckbox = document.getElementById('marketing-cookies');

    console.log('üç™ Elements check:', {
      banner: !!banner,
      modal: !!modal,
      acceptBtn: !!acceptBtn,
      declineBtn: !!declineBtn
    });

    if (!banner || !acceptBtn || !declineBtn) {
      console.error('üç™ Critical elements not found, retrying in 100ms');
      setTimeout(initializeCookieConsent, 100);
      return;
    }

    // Event listeners
    acceptBtn.addEventListener('click', () => {
      console.log('üç™ Accept clicked');
      setCookie(COOKIE_NAME, 'accepted');
      setCookie(ANALYTICS_COOKIE, 'true');
      setCookie(MARKETING_COOKIE, 'true');
      hideBanner();
      updateZarazConsent(true, true);
    });

    declineBtn.addEventListener('click', () => {
      console.log('üç™ Decline clicked');
      setCookie(COOKIE_NAME, 'declined');
      setCookie(ANALYTICS_COOKIE, 'false');
      setCookie(MARKETING_COOKIE, 'false');
      hideBanner();
      updateZarazConsent(false, false);
    });

    if (settingsBtn) {
      settingsBtn.addEventListener('click', showModal);
    }
    
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', hideModal);
    }

    if (saveSettingsBtn && analyticsCheckbox && marketingCheckbox) {
      saveSettingsBtn.addEventListener('click', () => {
        console.log('üç™ Save settings clicked');
        setCookie(COOKIE_NAME, 'customized');
        setCookie(ANALYTICS_COOKIE, analyticsCheckbox.checked.toString());
        setCookie(MARKETING_COOKIE, marketingCheckbox.checked.toString());
        hideModal();
        hideBanner();
        updateZarazConsent(analyticsCheckbox.checked, marketingCheckbox.checked);
      });
    }

    // Check for existing consent
    const consent = getCookie(COOKIE_NAME);
    console.log('üç™ Consent check result:', consent || 'none');
    
    if (!consent) {
      console.log('üç™ No consent found, showing banner in 1 second');
      setTimeout(() => {
        console.log('üç™ Timer fired, calling showBanner()');
        showBanner();
      }, 1000);
    } else {
      console.log(`üç™ Existing consent found: ${consent}`);
      // Apply saved consent to Zaraz
      const analytics = getCookie(ANALYTICS_COOKIE) === 'true';
      const marketing = getCookie(MARKETING_COOKIE) === 'true';
      console.log('üç™ Applying saved consent:', { analytics, marketing });
      updateZarazConsent(analytics, marketing);
    }
  })();
</script>